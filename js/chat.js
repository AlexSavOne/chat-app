import { loadMessages, saveMessages } from './storage.js';
import { renderMessages, appendMessage, showTyping, hideTyping, clearUI } from './ui.js';

const form = document.getElementById('chat-form');
const input = document.getElementById('messageInput');
const fileInput = document.getElementById('file-input');
const fileButton = document.getElementById('file-button');
const toggleThemeBtn = document.getElementById('toggle-theme');
const clearBtn = document.getElementById('clear-chat');
const container = document.getElementById('chat-container');
const modal = document.getElementById('modal');
const modalCancel = document.getElementById('modal-cancel');
const modalConfirm = document.getElementById('modal-confirm');

const fakeReplies = [
  '–ü—Ä–∏–≤–µ—Ç!',
  '–ö–∞–∫ –¥–µ–ª–∞?',
  '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ...',
  '–†–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë!',
  '–•–∞-—Ö–∞, —Å–º–µ—à–Ω–æ üòÇ',
  '–°–æ–≥–ª–∞—Å–µ–Ω —Å —Ç–æ–±–æ–π!',
  '–ù–µ —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º ü§î',
  '–ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ...',
  '–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∞—è!',
  '–¢—ã –∫–ª–∞—Å—Å–Ω—ã–π üëç'
];

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ç–µ–º—ã
const savedTheme = localStorage.getItem('theme') || 'light';
container.dataset.theme = savedTheme;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let messages = loadMessages();
renderMessages(messages);

// –°–º–µ–Ω–∞ —Ç–µ–º—ã
toggleThemeBtn.addEventListener('click', () => {
  const theme = container.dataset.theme === 'dark' ? 'light' : 'dark';
  container.dataset.theme = theme;
  localStorage.setItem('theme', theme);
});

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function showModal() {
  modal.classList.add('show');
  document.body.style.overflow = 'hidden';
}

function hideModal() {
  modal.classList.remove('show');
  document.body.style.overflow = '';
}

// –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
clearBtn.addEventListener('click', showModal);

modalCancel.addEventListener('click', hideModal);
modalConfirm.addEventListener('click', () => {
  messages = [];
  saveMessages(messages);
  clearUI();
  hideModal();
  showNotification('–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞', 'success');
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
modal.addEventListener('click', (e) => {
  if (e.target === modal) {
    hideModal();
  }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ Escape
document.addEventListener('keydown', (e) => {
  if (e.key === 'Escape' && modal.classList.contains('show')) {
    hideModal();
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
fileButton.addEventListener('click', () => {
  fileInput.click();
});

fileInput.addEventListener('change', async (e) => {
  const file = e.target.files[0];
  if (!file) return;

  try {
    const fileData = await readFile(file);
    const userMsg = {
      text: '',
      author: 'user',
      time: new Date().toISOString(),
      file: {
        name: file.name,
        type: file.type,
        data: fileData
      }
    };
    messages.push(userMsg);
    appendMessage(userMsg);
    saveMessages(messages);
    fileInput.value = '';
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª');
  }
});

// –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
function readFile(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = (e) => resolve(e.target.result);
    reader.onerror = (e) => reject(e);
    reader.readAsDataURL(file);
  });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
form.addEventListener('submit', e => {
  e.preventDefault();
  const text = input.value.trim();
  if (!text) return;

  const userMsg = {
    text,
    author: 'user',
    time: new Date().toISOString(),
    read: false
  };
  messages.push(userMsg);
  appendMessage(userMsg);
  saveMessages(messages);

  input.value = '';
  input.focus();

  // –ò–º–∏—Ç–∞—Ü–∏—è ¬´–ø–µ—á–∞—Ç–∞–µ—Ç...¬ª
  showTyping();
  setTimeout(() => {
    hideTyping();
    const reply = fakeReplies[Math.floor(Math.random() * fakeReplies.length)];
    const botMsg = {
      text: reply,
      author: 'bot',
      time: new Date().toISOString(),
      read: true
    };
    messages.push(botMsg);
    appendMessage(botMsg);
    saveMessages(messages);

    // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    userMsg.read = true;
    updateMessageStatus(userMsg);
  }, 800);
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function updateMessageStatus(message) {
  const messageElement = document.querySelector(`[data-message-id="${message.time}"]`);
  if (messageElement) {
    const statusElement = messageElement.querySelector('.read-status');
    if (statusElement) {
      statusElement.textContent = message.read ? '‚úì‚úì' : '‚úì';
    }
  }
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.className = `notification ${type}`;
  notification.textContent = message;
  document.body.appendChild(notification);

  setTimeout(() => {
    notification.style.opacity = '0';
    setTimeout(() => notification.remove(), 300);
  }, 3000);
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
function editMessage(messageId) {
  const message = messages.find(m => m.time === messageId);
  if (!message || message.author !== 'user') return;

  const messageElement = document.querySelector(`[data-message-id="${messageId}"]`);
  const textElement = messageElement.querySelector('.message-text');
  const originalText = textElement.textContent;

  messageElement.classList.add('editing');
  const editInput = document.createElement('input');
  editInput.type = 'text';
  editInput.className = 'message-edit-input';
  editInput.value = originalText;
  textElement.replaceWith(editInput);
  editInput.focus();
  editInput.select();

  const saveEdit = () => {
    const newText = editInput.value.trim();
    if (newText && newText !== originalText) {
      message.text = newText;
      message.edited = true;
      saveMessages(messages);
      renderMessages(messages);
      showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ', 'success');
    } else {
      textElement.textContent = originalText;
      editInput.replaceWith(textElement);
    }
    messageElement.classList.remove('editing');
  };

  const cancelEdit = () => {
    textElement.textContent = originalText;
    editInput.replaceWith(textElement);
    messageElement.classList.remove('editing');
  };

  editInput.addEventListener('blur', saveEdit);
  editInput.addEventListener('keydown', (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      saveEdit();
    } else if (e.key === 'Escape') {
      e.preventDefault();
      cancelEdit();
    }
  });
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
function deleteMessage(messageId) {
  const index = messages.findIndex(m => m.time === messageId);
  if (index === -1 || messages[index].author !== 'user') return;

  messages.splice(index, 1);
  saveMessages(messages);
  renderMessages(messages);
  showNotification('–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ', 'error');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ ui.js
window.editMessage = editMessage;
window.deleteMessage = deleteMessage;
